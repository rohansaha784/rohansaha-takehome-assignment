module LoanExtended.ApprovalWithLimit where

import DA.Assert   (assertMsg)
import DA.Optional (Optional(..))
import DA.Time
-- Token template
template Token
  with
    issuer    : Party
    owner     : Party
    amount    : Decimal
    currency  : Text
  where
    signatory issuer
    observer  owner

-- LoanLimit template
template LoanLimit
  with
    bank     : Party
    limitAmt : Decimal
    currency : Text
  where
    signatory bank
    key (bank, currency) : (Party, Text)
    maintainer key._1

-- LoanRequest with limit validation
template LoanRequest
  with
    borrower     : Party
    bank         : Party
    amount       : Decimal
    currency     : Text
  where
    signatory borrower
    observer  bank

    choice ApproveRequest : ContractId Loan
      with
        -- instead of looking it up, pass in the LoanLimit CID
        limitCid    : ContractId LoanLimit
        approvedOn  : Date
      controller bank
      do
        -- fetch the LoanLimit record
        LoanLimit{limitAmt, currency = curr2} <- fetch limitCid
        -- validate
        assertMsg "currency mismatch" (curr2 == currency)
        assertMsg "exceeds bank limit" (amount <= limitAmt)
        -- create the approved Loan with zero disbursed
        create Loan with
          bank        = bank
          borrower    = borrower
          totalAmount = amount
          currency    = currency
          approvedOn  = approvedOn
          disbursed   = 0.0

-- Loan template extended with a disbursed field
template Loan
  with
    borrower     : Party
    bank         : Party
    totalAmount  : Decimal       -- approved total
    currency     : Text
    approvedOn   : Date
    disbursed    : Decimal       -- total already disbursed
  where
    signatory bank, borrower
    choice Disburse : ContractId Loan
      with
        to      : Party
        amount' : Decimal
      controller bank
      do
        -- ensure no over-disbursement
        assertMsg "over-disbursement" (disbursed + amount' <= totalAmount)
        -- archive the old loan
        archive self
        -- 1. recreate loan with updated disbursed
        newloanCid <- create Loan with
          bank        = bank
          borrower    = borrower
          totalAmount = totalAmount
          currency    = currency
          approvedOn  = approvedOn
          disbursed   = disbursed + amount'
        -- 2. mint tokens and return its ContractId
        _ <- create Token with
          issuer   = bank
          owner    = to
          amount   = amount'
          currency = currency
        pure newloanCid