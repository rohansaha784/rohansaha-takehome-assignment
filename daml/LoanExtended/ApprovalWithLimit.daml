module LoanExtended.ApprovalWithLimit where

import DA.Assert   (assertMsg)
import DA.Optional (Optional(..))
import DA.Time
import LoanExtended.Repayment (RepaymentRestriction(..))
-- Token template
template Token
  with
    issuer    : Party
    owner     : Party
    amount    : Decimal
    currency  : Text
  where
    signatory issuer
    observer  owner

-- LoanLimit template
template LoanLimit
  with
    bank     : Party
    limitAmt : Decimal
    currency : Text
    utilizedAmt : Decimal   -- sum of all *outstanding* loans
  where
    signatory bank
    key (bank, currency) : (Party, Text)
    maintainer key._1

-- LoanRequest with limit validation
template LoanRequest
  with
    borrower     : Party
    bank         : Party
    amount       : Decimal
    currency     : Text
  where
    signatory borrower
    observer  bank

    choice ApproveRequest : ContractId Loan
      with
        limitCid   : ContractId LoanLimit
        approvedOn : Date
      controller bank
      do
        lim <- fetch limitCid


        assertMsg "currency mismatch" (lim.currency == currency)
        assertMsg "exceeds bank limit"
          (lim.utilizedAmt + amount <= lim.limitAmt)

        -- update LoanLimit â†’ consume & recreate with higher utilised
        archive limitCid
        _ <- create LoanLimit with
          bank        = bank
          limitAmt    = lim.limitAmt
          utilizedAmt = lim.utilizedAmt + amount
          currency    = currency

        -- create the approved Loan (0 disbursed, 0 repaid)
        create Loan with
          bank        = bank
          borrower    = borrower
          totalAmount = amount
          currency    = currency
          approvedOn  = approvedOn
          disbursed   = 0.0
          repaid      = 0.0

-- Loan template extended with a disbursed field
template Loan
  with
    borrower     : Party
    bank         : Party
    totalAmount  : Decimal       -- approved total
    currency     : Text
    approvedOn   : Date
    disbursed    : Decimal       -- total already disbursed
    repaid       : Decimal
  where
    signatory bank, borrower
    choice Disburse : ContractId Loan
      with
        to      : Party
        amount' : Decimal
      controller bank
      do
        -- ensure no over-disbursement
        assertMsg "over-disbursement" (disbursed + amount' <= totalAmount)
        -- archive the old loan
        --archive self
        -- 1. recreate loan with updated disbursed
        newloanCid <- create Loan with
          bank        = bank
          borrower    = borrower
          totalAmount = totalAmount
          currency    = currency
          approvedOn  = approvedOn
          disbursed   = disbursed + amount'
          repaid      = repaid
        -- 2. mint tokens and return its ContractId
        _ <- create Token with
          issuer   = bank
          owner    = to
          amount   = amount'
          currency = currency
        pure newloanCid

    choice Repay : ContractId Loan
      with
        repayAmt : Decimal
        restrCid : ContractId RepaymentRestriction
      controller borrower
      do
      -- policy checks
        RepaymentRestriction{minRepayAmt, currency = polCur} <- fetch restrCid
        assertMsg "currency mismatch"        (polCur == currency)
        assertMsg "below minimum repayment"  (repayAmt >= minRepayAmt)

        let outstanding = totalAmount - repaid
        assertMsg "repayment exceeds outstanding" (repayAmt <= outstanding)

        archive self                                    

        -- full vs partial
        if repayAmt == outstanding then do
          -- look up the LoanLimit CID by key
          mCid <- lookupByKey @LoanLimit (bank, currency) 
          limCid <- case mCid of
            Some cid -> pure cid
            None     -> abort "LoanLimit missing"

          -- fetch  record
          lim <- fetch limCid

          -- reduce utilisedAmt and close the loan
          archive limCid
          _ <- create LoanLimit with
            bank        = bank
            limitAmt    = lim.limitAmt
            utilizedAmt = lim.utilizedAmt - totalAmount
            currency    = currency

          pure self                               
        else do
          newCid <- create Loan with
            bank        = bank
            borrower    = borrower
            totalAmount = totalAmount
            currency    = currency
            approvedOn  = approvedOn
            disbursed   = disbursed
            repaid      = repaid + repayAmt
          pure newCid